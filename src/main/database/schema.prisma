generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../../../data/web3-client.db"
}

model BrowserGroup {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  browsers Browser[]
}

model Browser {
  id          String        @id @default(uuid())
  name        String
  platform    String
  status      String        @default("stopped")
  config      String        // JSON string
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  lastUsedAt  DateTime?
  groupId     String?
  
  group       BrowserGroup? @relation(fields: [groupId], references: [id])
  executions  TaskExecution[]
}

model TaskGroup {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  tasks Task[]
}

model Task {
  id          String        @id @default(uuid())
  name        String
  description String?
  script      String?       // 保留原有脚本字段用于向后兼容
  args        String?       // JSON string
  timeout     Int           @default(30000)
  retryCount  Int           @default(0)
  status      String        @default("draft")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  groupId     String?
  
  // 自动化任务扩展字段
  type        String        @default("script")  // "script" | "automation"
  actions     String?       // JSON string - AutomationAction[]
  variables   String?       // JSON string - Record<string, any>
  settings    String?       // JSON string - task settings
  tags        String?       // JSON string - string[]
  
  // 新任务文件系统字段
  taskId      String?       // 任务文件中的ID
  version     String?       // 任务版本
  author      String?       // 任务作者
  logoUrl     String?       // 任务Logo URL
  category    String?       // 任务分类
  code        String?       // 任务执行代码
  parameters  String?       // JSON string - TaskParameter[]
  examples    String?       // JSON string - 任务示例
  usageCount  Int           @default(0)
  lastUsed    DateTime?
  
  group       TaskGroup?    @relation(fields: [groupId], references: [id])
  executions  TaskExecution[]
  schedules   TaskSchedule[]
}

model TaskExecution {
  id          String   @id @default(uuid())
  taskId      String
  browserId   String
  status      String   @default("pending")
  startTime   DateTime @default(now())
  endTime     DateTime?
  result      String?  // JSON string
  error       String?
  logs        String?  // JSON string array
  retryCount  Int      @default(0)
  
  // 自动化执行扩展字段
  currentActionIndex  Int?     // 当前执行的动作索引
  extractedData      String?  // JSON string - 提取的数据
  screenshots        String?  // JSON string - 截图文件路径数组
  progressCompleted  Int?     // 已完成动作数
  progressTotal      Int?     // 总动作数
  variables          String?  // JSON string - 执行时的变量
  
  task        Task     @relation(fields: [taskId], references: [id])
  browser     Browser  @relation(fields: [browserId], references: [id])
}

model TaskSchedule {
  id          String   @id @default(uuid())
  taskId      String
  browserId   String   // 执行时使用的浏览器ID
  scheduleConfig String // JSON string - ScheduleConfig
  variables   String?  // JSON string - 调度时的变量
  isActive    Boolean  @default(true)
  executionCount Int   @default(0)
  maxExecutions  Int?  // 最大执行次数
  nextExecutionTime DateTime?
  lastExecutionTime DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  task        Task     @relation(fields: [taskId], references: [id])
}

model AccountGroup {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  accounts Account[]
}

model Account {
  id          String        @id @default(uuid())
  name        String
  type        String
  platform    String
  credentials String        // JSON string (encrypted)
  status      String        @default("active")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  lastUsedAt  DateTime?
  groupId     String?
  
  group       AccountGroup? @relation(fields: [groupId], references: [id])
}

model SystemLog {
  id          String   @id @default(uuid())
  timestamp   DateTime @default(now())
  level       String
  message     String
  context     String?
  metadata    String?  // JSON string
}

model SystemConfig {
  id                    String @id @default(uuid())
  maxConcurrentBrowsers Int    @default(10)
  defaultTimeout        Int    @default(30000)
  retryAttempts         Int    @default(3)
  logLevel              String @default("info")
  dataDirectory         String @default("./data")
  autoCleanup           Boolean @default(true)
  cleanupInterval       Int    @default(3600000)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}